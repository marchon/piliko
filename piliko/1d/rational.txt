/*
very very experimental version of Rational numbers for Go.

Basic Theory

This differs a bit from the big.Rational type that is built in to Go.

The theory here is that, basically, a rational can be considered a 
2-dimensional vector from the point (x=0,y=0) to the point 
(x=numerator,y=denominator). This is inspired (but doesnt follow 
exactly) Norman Wildberger's youtube videos from the University of New 
South Wales.

You can consider two rationals to be a 'bivector'. then, the 'wedge', or 
'signed area of the paralellogram' or 'determinant' or 'projected cross 
product' formed by two vectors can give a lot of interesting information 
about the relationship between the two vectors. Because of the way 
rationals are added and subtracted, the wedge also happens to give some 
interesting information about the relationship between the two 
rationals.

For example, the wedge of two vectors, v1 and v2, with coordinates
of v1 being x1,y1 and of v2 being x2,y2, is like so:

  Wedge v1,v2 = x1*y2 - x2*y1

Compare with the subtraction of two rationals: a/b-c/d

  a/b-c/d = (a*d - b*c) / b*d

The top of that final term can be interpreted as the 'wedge' of two 
vectors formed from the two rationals numbers. v1=(a,b) and v2=(c,d).

For another example, the wedge between two vectors of the same slope is 
always 0. This means that, for example, the vectors 2,3 and 4,6 are in 
the same direction because 2*6-3*4=0. The triangles formed by them, with 
the axis, are similar. The vectors are parallell. And also, note that 
the rational numbers 2/3 and 4/6 are the same. It turns out that for any 
rationals, the wedge can be used to calculate equality - without having 
to actually do division.

Wedge v1, v2 will also tell the 'winding' or 'clockwise-ness' or 'which 
side' the point v1 is on versus the line segment formed by the origin 
and v2. So, the point 3,4 is on the 'left' side of the vector 2,1, 
because Wedge (3,4) (2,1) = 3*1-4*2 = 3-8 = -5 which is less than 0. Or 
that if you drew a line from 0,0 to 2,1, then to 3,4, it would be a 
'counterclockwise' turn. Also note that the rational number 3/4 is less 
than the rational number 2/1. This turns out to be true for all 
rationals, related to how subtraction and addition of rationals works.  
So the wedge can help tell you less-than/greater-than regarding 
rationals. (with a caveat for how you represent negative/positive, see below)


What about Divide by Zero?

This also allows computation with numbers that are often considered 
'illegal', like 1/0, 50/0, etc. In the vector interpretation, they are 
just plain vectors. You don't need to worry about 'what the number is' 
until you try to convert to a floating point approximation or something. 
You can add 1,0 to 0,1. but it is an 'add' in the rational sense, which 
is written as follows:

 a/b + c/d => d*a+c*b / d*b. 

Lets look at add, and the other operators, and how they work with x/0

 a/b + c/d => d*a+c*b / d*b
 a/b - c/d => d*a-c*b / d*b 
 a/b * c/d => a*c / d*b
 a/b / c/d => a*d / b*c 

 1/0 + 5/12 => 12/0
 1/0 - 5/12 => 12/0
 1/0 * 5/12 => 5/0
 1/0 / 5/12 => 12/0

 5/12 + 1/0 => 12/0
 5/12 - 1/0 => -12/0
 5/12 * 1/0 => 5/0
 5/12 / 1/0 => 0/12

In other words, if you interpret any x/0 as 'infinity' then anything 
done to infinity results in infinity. Except when you divide something 
by infinity; then you get 0. It's kind of funny, but that's kind of how 
we expect infinity to work. But there is no special 'if' or 'switch' 
statement in the code - this is just a natural result of interpreting 
rational numbers as though they were 2 dimensional vectors.


What about negative and positive?

This is a bit of a quandry. To make it all turn out, we can maybe use this:

-/- = positive
-/+ = negative
+/- = negative
+/+ = positive

This is not as simple as how we dealt with infinity, but it's not too 
bad. If you want to know if a number is 'negative' or 'positive', you 
need to check both the numerator and denominator. 


What about greater than less than?

That is a problem. Currently, infinite is greater than, and less than, 
everything.

What about overflow?

When the int's get too big we can 'overflow' them. For example if we use 
8 bit integers, then out at the edges we have 1/255 and 255/1 as the 
extreme numbers we can represent. (or, well, technically 0/255 and 255/0). WhAt if we go something like this?

1/255 * 1/255 ? 

The answer should be 1/65535 .. but we cant represent 65535 in an 8 bit 
integer. That is an overflow. That is where 'big integers' come in. They 
are fancy numbers built on top of 'base' types in computer languages. 
But 'big integers' can be slow. But what happens when you overflow then?

This code doesn't presently deal with it. It's a problem.


Difference with go's builtin big.Rational

big.Rational uses big numbers, this doesnt. big.Rational 'normalizes' 
the number after every computation. This doesn't. big.Rational 
represents numbers as "int/unsigned-int' which complicates some of the 
calculations (and simplifies others?)


*/

